[tool.poetry]
name = "ares-trading-bot"
version = "0.1.0"
description = "Ares Trading Bot: Modular, ML-driven trading and backtesting framework"
authors = ["Remy Roche"]
package-mode = false

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
# Core scientific stack
numpy = ">=1.24.0,<2.0.0"
pandas = "^2.0.0"
scipy = "^1.12.0"
scikit-learn = "1.3.2"
imbalanced-learn = "0.11.0"

# ML/AI libraries
tensorflow = "^2.15.0"
keras = "^2.15.0"
tf-keras = "^2.15.0"
lightgbm = "^4.3.0"
optuna = "^4.4.0"
joblib = "^1.3.0"
mlflow = "^3.1.0"
plotly = "^6.2.0"
pandas-ta = "^0.3.14b0"
arch = "^7.2.0"
pytorch-tabnet = "^4.1.0"
hmmlearn = "^0.3.0"

# Enhanced hyperparameter optimization dependencies
scikit-optimize = "^0.10.2"  # Bayesian optimization
hyperopt = "^0.2.7"  # Alternative optimization library
ray = {extras = ["tune"], version = "^2.48.0"}  # Distributed optimization
pytorch-lightning = "^2.2.0"  # For advanced model training
torch = "^2.2.0"  # PyTorch for transformer models
transformers = "^4.37.0"  # Hugging Face transformers
datasets = "^2.16.0"  # For dataset management
accelerate = "^0.25.0"  # For distributed training

# SHAP with all required dependencies
shap = "^0.42.1"
# SHAP dependencies (explicitly specified to avoid conflicts)
numba = "^0.58.0"
cloudpickle = "^2.0.0"


# Monitoring and metrics
prometheus-client = "^0.19.0"

# Exchange and trading
ccxt = "^4.4.0"
python-binance = "^1.0.19"
ta = "^0.11.0"

# Networking and async
aiohttp = "^3.10.0"
aiohttp-retry = "^2.8.0"
websockets = "^12.0"
yarl = "^1.17.0"
aiosignal = "^1.4.0"
frozenlist = "^1.4.0"
multidict = "^6.0.0"
aiofiles = "^24.1.0"
aiosqlite = "^0.21.0"
aiodns = "^3.5.0"
pycares = "^4.9.0"
requests = "^2.31.0"
aiosmtplib = "^4.0.1"

# Database and storage
firebase-admin = "^7.0.0"
influxdb-client = "^1.40.0"
sqlalchemy = "^2.0.0"
alembic = "^1.13.0"

# Data processing and analysis
pywavelets = "^1.8.0"
statsmodels = "^0.14.0"
filelock = "^3.14.0"
sympy = "^1.13.0"
networkx = "^3.3.0"
fsspec = "^2024.0.0"
patsy = "^0.5.0"
matplotlib = "^3.8.0"
seaborn = "^0.13.0"


# Utilities
python-dotenv = "^1.0.0"
pydantic = "^2.8.0"
pydantic-settings = "^2.2.0"
click = "^8.1.0"
rich = "^14.0.0"
tqdm = "^4.67.0"
colorama = "^0.4.6"
python-dateutil = "^2.8.0"
pytz = "^2024.1"
schedule = "^1.2.0"
python-json-logger = "^2.0.0"
structlog = "^24.1.0"
dataclasses-json = "^0.6.0"
sentry-sdk = "^2.13.0"

# Efficiency optimization dependencies
pyarrow = "^12.0.0"  # For efficient DataFrame operations
fastparquet = "^0.8.0"  # For compressed storage
memory-profiler = "^0.60.0"  # For memory usage monitoring

# Computational optimization dependencies
psutil = "^6.0.0"  # System and process utilities
multiprocessing-logging = "^0.3.4"  # For parallel processing logs
cachetools = "^5.3.0"  # For advanced caching

# Web framework and scheduling
fastapi = "^0.115.0"
uvicorn = "^0.32.0"
apscheduler = "^3.10.4"
xgboost = "^3.0.3"
catboost = "^1.2.8"

# Advanced model dependencies
optuna-integration = {extras = ["tfkeras"], version = "^4.4.0"}
vulture = "^2.14"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.24.0"
black = "^24.10.0"
isort = "^5.13.2"
mypy = "^1.17.0"
ruff = "^0.6.2"
vulture = "^2.11"
radon = "^6.0.1"
# scalpel = "^0.6.1"  # Removed: This was a sound editor, not a code analysis tool
# pycg = "^0.0.12"  # Python call graph generator - not available
pylint = "^3.2.0"

# Testing dependencies for optimization
pytest-benchmark = "^4.0.0"  # For performance benchmarking
pytest-cov = "^4.1.0"  # For coverage testing
pytest-mock = "^3.12.0"  # For mocking in tests
pytest-xdist = "^3.5.0"  # For parallel test execution

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
ares = "src.main_modular:main"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "DTZ", "T10", "EM", "EXE", "ISC", "ICN", "Q", "SIM", "TID", "TCH", "ARG", "PIE", "LOG", "PTH", "RSE", "RET", "SLF", "SLOT", "TRY", "NPY", "AIR", "PERF", "FURB", "C90", "COM812", "PT", "PGH", "PLR", "PLE", "PLW", "S", "BLE", "FBT"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# Ignore E402 (import not at top of file) for specific patterns
# This is for files that intentionally set up sys.path before imports
[tool.ruff.lint.per-file-ignores]
# Scripts that set up sys.path before imports
"scripts/*.py" = ["E402"]
# Training steps that set up sys.path before imports  
"src/training/steps/*.py" = ["E402"]
# Training manager that has intentional import order
"src/training/training_manager.py" = ["E402"]
# Data downloader that sets up path
"src/training/steps/data_downloader.py" = ["E402"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto" 
